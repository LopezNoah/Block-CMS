---
import ViewMode from "@components/Block/Detail/View.astro";
import EditMode from "@components/Block/Detail/Edit.astro";
import { db } from "@lib/drizzle";
import { blockTypes, blocks } from "@lib/models/schema";
import { eq } from "drizzle-orm";
import type { BlockInsert } from "@lib/models/types";
import { createForm } from "simple-stack-form/module";
import { z } from "zod";

const searchParams = Astro.url.searchParams;

const mode = searchParams.get('mode') || "view";
const idParam = Number(searchParams.get('id') || 0);
let pageIdParam = Number(searchParams.get('pageId') || 0);
let zoneParam = searchParams.get('zone') || "";

const blockQuery = (idParam: number) => db
    .select({
        id: blocks.id,
        blockType: blockTypes.name,
        zone: blocks.zone,
        pageId: blocks.pageId,
        name: blocks.name
    })
    .from(blocks)
    .innerJoin(blockTypes, eq(blockTypes.id, blocks.blockTypeId))
    .where(eq(blocks.id, idParam));

const insertBlockQuery = (values: BlockInsert) => db
    .insert(blocks)
    .values(values)
    .returning();

const block = (await blockQuery(idParam))[0];
let newBlock: {
    id: number;
    blockType: string;
    zone: string;
    pageId: number;
    name: string;
} | undefined;

const request = Astro.request;
const method = request.method;
const headers = request.headers;

const htmxRequest = headers.get('HX-Request') === "true";
export const blockEntryForm = createForm({
  blockType: z.string(),
  id: z.number().optional(),
  name: z.string(),
  pageId: z.number(),
  zone: z.string()
});

const res = await Astro.locals.form.getData(blockEntryForm);

if (method === "POST" && htmxRequest && res !== undefined) {
    if (res.fieldErrors !== undefined) {
        console.log(JSON.stringify(res.fieldErrors));
        console.log(res.data);
        throw new Error(JSON.stringify(res.fieldErrors));
    }

    if (res.data === undefined) {
        throw new Error("Data was undefined");
    }

    const values: BlockInsert = {
        blockTypeId: 1,
        zone: res.data.zone,
        pageId: res.data.pageId,
        name: res.data.name
    }

    let newBlock = (await insertBlockQuery(values))[0];
}

const isEditMode = block === undefined || mode === "edit";
const blockProps = isEditMode ?
    { id: 0, zone: zoneParam, pageId: pageIdParam, blockType: "", name: "" }
    : (newBlock !== undefined && htmxRequest ? newBlock : block);

---
{() => {
    return isEditMode ?
        (<EditMode {...blockProps}></EditMode>) :
        (<ViewMode {...blockProps}></ViewMode>)
}}